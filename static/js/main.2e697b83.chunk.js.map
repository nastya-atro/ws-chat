{"version":3,"sources":["reportWebVitals.js","chat-2-features/f1-chatPage/c3-dal/chat-api.ts","chat-2-features/f1-chatPage/c2-bll/chat-reducer.ts","chat-1-main/m3-dal/api.ts","chat-2-features/f2-login/l3-dal/login-api.ts","chat-2-features/f2-login/l2-bll/login-reducer.ts","chat-1-main/m2-bll/app-reducer.ts","chat-1-main/m2-bll/redux-store.ts","chat-1-main/m2-bll/app-selector.ts","chat-2-features/f2-login/l2-bll/login-selector.ts","chat-2-features/f2-login/l1-ui/LoginPage.tsx","chat-2-features/f1-chatPage/c2-bll/chat-selector.ts","chat-2-features/f1-chatPage/c1-ui/Chat-4-FormAddMessages.tsx","chat-2-features/f1-chatPage/c1-ui/Chat-3-Message.tsx","chat-2-features/f1-chatPage/c1-ui/Chat-2-Messages.tsx","chat-2-features/f1-chatPage/c1-ui/Chat-1-Page.tsx","chat-2-features/f2-login/l1-ui/Header.tsx","chat-1-main/m1-ui/App.tsx","index.js","chat-2-features/f2-login/l1-ui/LoginPage.module.css","chat-2-features/f1-chatPage/c1-ui/Chat.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","webSocket","subscribers","notifySubscribersAboutStatus","status","forEach","s","openHandler","closeHandler","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatWebSocketApi","eventName","callback","push","filter","newMessage","send","initialState","chatMessages","actions","newChatMessages","type","_newMessagesHandler","newChatMessagesHandlerCreator","dispatch","_newStatusHandler","newStatusHandlerCreator","chatReducer","state","action","instanse","axios","create","withCredentials","headers","baseURL","loginApi","email","password","rememberMe","captcha","post","res","delete","get","id","login","isAuth","payload","getLoginThunk","a","resultCode","console","log","loginReducer","isInitialised","appReducer","rootReducer","combineReducers","chat","app","store","createStore","applyMiddleware","thunkMiddleware","appSelector","loginSelector","isAuthSelector","captchaSelector","validateForm","values","errors","test","length","LoginPage","useDispatch","useSelector","to","initialValues","checkbox","validate","onSubmit","onSubmitProps","captchaUrl","url","loginThunk","setSubmitting","touched","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","className","login_form","TextField","label","onChange","onBlur","name","value","chat_textField","error","placeholder","autoComplete","FormControlLabel","control","Checkbox","inputProps","buttonLogin","Button","style","backgroundColor","disabled","variant","color","messagesSelector","statusSelector","useStyles","makeStyles","theme","createStyles","textField","width","button","marginLeft","padding","FormAddMessages","classes","useState","message","setMessage","chat_form","noValidate","Grid","container","alignItems","item","xs","onClick","endIcon","Icon","currentTarget","chat_userPhoto","spacing","height","marginTop","Message","props","direction","photo","Avatar","alt","src","aria-label","userName","charAt","toUpperCase","chat_userName","chat_userMessage","Messages","messagesAncorRef","useRef","isAutoScroll","setAutoScroll","useEffect","current","scrollIntoView","behavior","messagesElement","map","m","index","userId","overflowY","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","ref","root","flexGrow","menuButton","marginRight","title","chat_container","chat_appBar","ChatPage","Paper","elevation","Header","AppBar","position","Toolbar","Typography","loginName","buttonLoginPage","chat_paper","minHeight","AppC","withRouter","promise","Promise","all","Container","maxWidth","exact","path","render","AppContainer","MainApp","basename","process","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2e697b83.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let webSocket: WebSocket | null = null\r\n\r\nlet subscribers = {\r\n    'messages-recived': [] as SubscribersType[],\r\n    'status-changed': [] as StatusChangedType[]\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach((s) => s(status))\r\n}\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('penging')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data)\r\n    subscribers['messages-recived'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst cleanUp = () => {\r\n    webSocket?.removeEventListener('close', closeHandler)\r\n    webSocket?.removeEventListener('message', messageHandler)\r\n    webSocket?.removeEventListener('open', openHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    webSocket?.close()\r\n\r\n    webSocket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\n    notifySubscribersAboutStatus('penging')\r\n\r\n    webSocket.addEventListener('close', closeHandler)\r\n    webSocket.addEventListener('message', messageHandler)\r\n    webSocket.addEventListener('open', openHandler)\r\n}\r\n\r\nexport const chatWebSocketApi = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n\r\n    stop() {\r\n        subscribers['messages-recived'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        webSocket?.close()\r\n    },\r\n\r\n    subscribe(eventName: EventsNameType, callback: SubscribersType | StatusChangedType) {\r\n        //@ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            //@ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n\r\n    unsubscribe(eventName: EventsNameType, callback: SubscribersType | StatusChangedType) {\r\n        //@ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n\r\n    sendMessage(newMessage: string) {\r\n        webSocket?.send(newMessage)\r\n    },\r\n}\r\n \r\n\r\nexport type ChatResponseType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'penging' | 'ready'\r\ntype SubscribersType = (chatMessages: ChatResponseType[]) => void\r\ntype StatusChangedType = (status: StatusType) => void\r\ntype EventsNameType = 'messages-recived' | 'status-changed'","import { Dispatch } from \"redux\";\r\nimport { CommonActionsTypes, CommonThunkType } from \"../../../chat-1-main/m2-bll/redux-store\";\r\nimport { ChatResponseType, chatWebSocketApi, StatusType } from './../c3-dal/chat-api'\r\n  \r\n\r\nlet initialState = {\r\n    chatMessages: [] as ChatResponseType[],\r\n    status: 'pending' as StatusType\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst chatReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'chat/MESSAGES_RECIVED':\r\n            return {\r\n                ...state,\r\n                chatMessages: [...state.chatMessages, ...action.newChatMessages]\r\n            }\r\n        case 'chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n \r\ntype ActionsTypes = CommonActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsTypes>\r\n\r\nexport const actions = {\r\n    messagesRecived: (newChatMessages: ChatResponseType[]) => ({\r\n        type: 'chat/MESSAGES_RECIVED', newChatMessages } as const),\r\n    statusChanged: (status:StatusType) => ({\r\n        type: 'chat/STATUS_CHANGED', status }as const)\r\n}\r\n\r\n\r\nlet _newMessagesHandler: ((chatMessages: ChatResponseType[]) => void) | null = null\r\nconst newChatMessagesHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessagesHandler === null) {\r\n        _newMessagesHandler = (chatMessages) => {\r\n            dispatch(actions.messagesRecived(chatMessages))\r\n        }\r\n    }\r\n    return _newMessagesHandler\r\n}\r\n\r\nlet _newStatusHandler: ((status: StatusType) => void) | null = null\r\nconst newStatusHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newStatusHandler === null) {\r\n        _newStatusHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _newStatusHandler\r\n}\r\n\r\n\r\nexport const startMessageListeningThunk = (): ThunkType => async (dispatch) => {\r\n    chatWebSocketApi.start()\r\n    chatWebSocketApi.subscribe('messages-recived', newChatMessagesHandlerCreator(dispatch))\r\n    chatWebSocketApi.subscribe('status-changed', newStatusHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessageListeningThunk = (): ThunkType => async (dispatch) => {\r\n    chatWebSocketApi.stop()\r\n    chatWebSocketApi.unsubscribe('messages-recived', newChatMessagesHandlerCreator(dispatch))\r\n    chatWebSocketApi.unsubscribe('status-changed', newStatusHandlerCreator(dispatch))\r\n}\r\n\r\nexport const sendmessageThunk = (newMessage: string): ThunkType => async (dispatch) => {\r\n    chatWebSocketApi.sendMessage(newMessage)\r\n}\r\n\r\n\r\nexport default chatReducer;","import axios from \"axios\"\r\n\r\nexport const instanse = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"e33a9b28-32d1-4022-81b8-0bd4ba992caa\" },\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`\r\n})\r\n\r\n\r\nexport type ResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\nexport type ResponseTypeCaptcha = {\r\n    url: string\r\n}\r\n\r\nexport type ResponseTypeAuthMe = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n}\r\n\r\n","import { instanse, ResponseTypeCaptcha, ResponseTypeAuthMe, ResponseType } from './../../../chat-1-main/m3-dal/api';\r\n\r\n \r\nexport const loginApi = {\r\n    loginPost(email: string, password: string, rememberMe: boolean, captcha: string | null) {\r\n        return instanse.post<ResponseType>(`auth/login`, { email, password, rememberMe, captcha })\r\n            .then(res => res.data)\r\n    },\r\n    loginDelete() {\r\n        return instanse.delete<ResponseType>(`auth/login`)\r\n            .then(res => res.data)\r\n    },\r\n    authMe() {\r\n        return instanse.get<ResponseTypeAuthMe>(`auth/me`)\r\n        .then(res => res.data)\r\n    },\r\n    getCaptcha(){\r\n        return instanse.get<ResponseTypeCaptcha>(`security/get-captcha-url`)\r\n        .then(res => res.data)\r\n    }\r\n\r\n}","import { CommonActionsTypes, CommonThunkType } from \"../../../chat-1-main/m2-bll/redux-store\"\r\nimport { loginApi } from './../l3-dal/login-api';\r\n\r\n\r\nlet initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst loginReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/CAPTCHA_RECIVED':\r\n        case 'login/LOGIN_RECIVED':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n \r\ntype ActionsTypes = CommonActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsTypes>\r\n\r\nexport const actions = {\r\n    loginRecived: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'login/LOGIN_RECIVED', payload: { id, email, login, isAuth }\r\n    } as const),\r\n    captchaRecived: (captcha: string | null) => ({\r\n        type: 'login/CAPTCHA_RECIVED', payload: { captcha }\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getLoginThunk = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await loginApi.authMe()\r\n        if (data.resultCode === 0) {\r\n            let { id, email, login } = data.data;\r\n            dispatch(actions.loginRecived(id, email, login, true))\r\n        } else { console.log('error auth') }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await loginApi.getCaptcha()\r\n        const captchaUrl = data.url\r\n        dispatch(actions.captchaRecived(captchaUrl))\r\n    }\r\n}\r\n\r\nexport const loginThunk = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await loginApi.loginPost(email, password, rememberMe, captcha)\r\n        if (data.resultCode === 0) {\r\n            dispatch(getLoginThunk())\r\n        } else if (data.resultCode === 10) {\r\n            dispatch(getCaptcha())\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutThunk = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await loginApi.loginDelete()\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.loginRecived(null, null, null, false))\r\n        } else { console.log('error auth') }\r\n    }\r\n}\r\n\r\nexport default loginReducer;","import { getLoginThunk } from '../../chat-2-features/f2-login/l2-bll/login-reducer';\r\nimport { CommonActionsTypes, CommonThunkType } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n    isInitialised: false,\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst appReducer = (state:initialStateType= initialState, action: ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case 'app/INITIALISED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitialised: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions={\r\n    initializedSuccess:() => ({\r\n        type: 'app/INITIALISED_SUCCESS'\r\n    }) as const\r\n}\r\n\r\ntype ActionsTypes=CommonActionsTypes<typeof actions>\r\ntype ThunkType= CommonThunkType<ActionsTypes>\r\n\r\nexport const initializeApp = ():ThunkType => async(dispatch) => {\r\n        let promise = await dispatch(getLoginThunk());\r\n        Promise.all([promise])\r\n            dispatch(actions.initializedSuccess()) \r\n    }\r\nexport default appReducer;","import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware, { ThunkAction} from \"redux-thunk\";\r\nimport chatReducer from \"../../chat-2-features/f1-chatPage/c2-bll/chat-reducer\";\r\nimport loginReducer from './../../chat-2-features/f2-login/l2-bll/login-reducer';\r\nimport appReducer from './app-reducer';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    chat: chatReducer,\r\n    login: loginReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type CommonActionsTypes<T> = T extends {[key: string]:(...args:any[])=> infer U }?U:never\r\nexport type CommonThunkType<A extends Action>= ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { AppStateType } from \"./redux-store\"\r\n\r\n\r\nexport const appSelector=(state: AppStateType)=>{\r\n    return state.app.isInitialised\r\n}\r\n\r\n","import { AppStateType } from \"../../../chat-1-main/m2-bll/redux-store\"\r\n\r\nexport const loginSelector=(state: AppStateType)=>{\r\n    return state.login.login\r\n}\r\n\r\nexport const isAuthSelector=(state: AppStateType)=>{\r\n    return state.login.isAuth\r\n}\r\n\r\nexport const captchaSelector=(state: AppStateType)=>{\r\n    return state.login.captcha\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Formik, Form, Field, FormikErrors } from 'formik';\r\nimport s from './LoginPage.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginThunk } from './../l2-bll/login-reducer';\r\nimport { captchaSelector, isAuthSelector } from './../l2-bll/login-selector';\r\nimport { Redirect } from 'react-router';\r\nimport { Checkbox, FormControlLabel, TextField, Button } from '@material-ui/core';\r\n\r\ntype ValuesType = {\r\n    email: string\r\n    password: string\r\n    captcha: string\r\n    checkbox: any\r\n}\r\n\r\nconst validateForm = (values: ValuesType) => {\r\n    const errors: FormikErrors<ValuesType> = {};\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be more then 6 characters'\r\n    }\r\n    return errors;\r\n}\r\n\r\nconst LoginPage = () => {\r\n    const dispatch = useDispatch()\r\n    const captcha = useSelector(captchaSelector)\r\n    const isAuth = useSelector(isAuthSelector)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/chat'} />\r\n    }\r\n\r\n    const submit = (values: ValuesType, onSubmitProps: any) => {\r\n        dispatch(loginThunk(values.email, values.password, values.checkbox, values.captcha))\r\n        onSubmitProps.setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ email: '', password: '', checkbox: 'true', captcha: '' }}\r\n                validate={validateForm}\r\n                onSubmit={submit}\r\n            >\r\n                {({ values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isValid,\r\n                    isSubmitting }) => (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <div className={s.login_form}>\r\n                            <div >\r\n                                <TextField id=\"standard-basic\" label=\"Login\" onChange={handleChange} onBlur={handleBlur} type=\"email\"\r\n                                    name=\"email\" value={values.email} className={s.chat_textField} />\r\n                                <div className={s.error}> {errors.email && touched.email && errors.email}</div>\r\n                            </div>\r\n                            <div>\r\n                                <TextField onChange={handleChange} onBlur={handleBlur}\r\n                                    type=\"password\" name=\"password\" placeholder=\"Password\" value={values.password}\r\n                                    id=\"standard-password-input\" autoComplete=\"current-password\" className={s.chat_textField} />\r\n                                <div className={s.error}>{errors.password && touched.password && errors.password} </div>\r\n                            </div>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox onChange={handleChange} name=\"checkbox\" inputProps={{ 'aria-label': 'primary checkbox' }} />}\r\n                                    label=\"remember me\" />\r\n                            </div>\r\n\r\n                            {captcha && <Field onChange={handleChange} type=\"text\" name=\"captcha\" />}\r\n                            <div className={s.buttonLogin} >\r\n                                <Button style={{ backgroundColor: 'rgba(255, 242, 128, 0.986)' }} type=\"submit\" disabled={!isValid || isSubmitting} variant=\"contained\" color=\"secondary\">\r\n                                    Log in </Button> </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginPage","import { AppStateType } from \"../../../chat-1-main/m2-bll/redux-store\"\r\n\r\n\r\nexport const messagesSelector=(state: AppStateType)=>{\r\n    return state.chat.chatMessages\r\n}\r\n\r\nexport const statusSelector=(state: AppStateType)=>{\r\n    return state.chat.status\r\n}","import { TextField, Theme, makeStyles, createStyles, Button, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './Chat.module.css'\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { sendmessageThunk } from '../c2-bll/chat-reducer';\r\nimport { statusSelector } from '../c2-bll/chat-selector';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textField: {\r\n            width: '88%',\r\n            backgroundColor: 'rgba(255, 242, 128, 0.356)'\r\n        },\r\n        button: {\r\n            width: '90%',\r\n            marginLeft: '8px',\r\n            padding: '13px 5px',\r\n            backgroundColor: 'rgba(255, 242, 128, 0.986)'\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst FormAddMessages: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(statusSelector)\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendmessageThunk(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.chat_form}>\r\n            <form noValidate autoComplete=\"off\">\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={2}>\r\n                        <Button disabled={status !== 'ready'} onClick={sendMessage}\r\n                            variant=\"contained\" color=\"inherit\" className={classes.button} endIcon={<Icon>send</Icon>}>Send</Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <TextField className={classes.textField} id=\"outlined-basic\"\r\n                            variant=\"outlined\" label=\"Your message...\"\r\n                            onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormAddMessages","import { Avatar, Grid, makeStyles, createStyles, Theme } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { ChatResponseType } from '../c3-dal/chat-api';\r\nimport s from './Chat.module.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        chat_userPhoto: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nconst Message: React.FC<ChatResponseType> = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container direction=\"row\" alignItems=\"center\">\r\n            <Grid item xs={2} >\r\n                <Grid container direction=\"column\" alignItems=\"center\">\r\n                    <Grid item>{props.photo ? <Avatar className={classes.chat_userPhoto} alt='userPhoto' src={props.photo} /> :\r\n                        <Avatar className={classes.chat_userPhoto} aria-label=\"recipe\">{props.userName.charAt(0).toUpperCase()} </Avatar>}</Grid>\r\n                    <Grid item className={s.chat_userName}>{props.userName}</Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs>\r\n                <Grid item xs className={s.chat_userMessage}>{props.message}</Grid></Grid>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default Message","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { messagesSelector } from '../c2-bll/chat-selector';\r\nimport Message from './Chat-3-Message';\r\n\r\nconst Messages: React.FC = () => {\r\n    const chatMessages = useSelector(messagesSelector)\r\n    const messagesAncorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAncorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [chatMessages])\r\n\r\n    let messagesElement = chatMessages.map((m: any, index:any) => <Message\r\n        key={index} userId={m.userId}\r\n        message={m.message} photo={m.photo} userName={m.userName} />)\r\n\r\n    return (\r\n        <div style={{ height: '500px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messagesElement}\r\n            <div ref={messagesAncorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages","import React, { Fragment } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport FormAddMessages from './Chat-4-FormAddMessages';\r\nimport Messages from './Chat-2-Messages';\r\nimport { Theme, createStyles, makeStyles, Paper } from '@material-ui/core';\r\nimport { startMessageListeningThunk } from '../c2-bll/chat-reducer';\r\nimport { stopMessageListeningThunk } from './../c2-bll/chat-reducer';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        chat_container: {\r\n            marginTop: theme.spacing(3)\r\n        },\r\n        chat_appBar: {\r\n            backgroundColor: 'rgba(255, 242, 128, 0.986)'\r\n        }\r\n    }),\r\n);\r\n\r\nconst ChatPage: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessageListeningThunk())\r\n        return () => {\r\n            dispatch(stopMessageListeningThunk())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Paper elevation={0} className={classes.chat_container}>\r\n                <Messages />\r\n            </Paper>\r\n            <FormAddMessages />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatPage","import React from 'react';\r\nimport { Button, AppBar, Theme, createStyles, makeStyles, Toolbar, Typography } from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { isAuthSelector, loginSelector } from './../l2-bll/login-selector';\r\nimport { logoutThunk } from './../l2-bll/login-reducer';\r\nimport s from './LoginPage.module.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        chat_container: {\r\n            marginTop: theme.spacing(3)\r\n        },\r\n        chat_appBar: {\r\n            backgroundColor: 'rgba(255, 242, 128, 0.986)'\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    const login = useSelector(loginSelector)\r\n    const isAuth = useSelector(isAuthSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n\r\n    return (\r\n        <AppBar className={classes.chat_appBar} position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Chat online\r\n            </Typography>\r\n                {isAuth ? <>\r\n                    <div className={s.loginName}>\r\n                        {login} </div>\r\n                    <Button  onClick={logoutCallback} color=\"inherit\">Log-out</Button>\r\n                </> :\r\n                    <NavLink className={s.buttonLoginPage} to='/login'> <Button color=\"inherit\">Login</Button></NavLink>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\nexport default Header","import React, { useEffect } from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Redirect, Route, withRouter } from 'react-router';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport store from '../m2-bll/redux-store';\nimport { initializeApp } from '../m2-bll/app-reducer';\nimport { appSelector } from './../m2-bll/app-selector';\nimport { Container, Theme, createStyles, makeStyles, Paper } from '@material-ui/core';\nimport LoginPage from './../../chat-2-features/f2-login/l1-ui/LoginPage';\nimport ChatPage from '../../chat-2-features/f1-chatPage/c1-ui/Chat-1-Page';\nimport Header from '../../chat-2-features/f2-login/l1-ui/Header';\nimport { isAuthSelector } from '../../chat-2-features/f2-login/l2-bll/login-selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n    },\n    chat_container: {\n      marginTop: theme.spacing(3),\n    },\n    chat_paper: {\n      minHeight: '650px'\n    }\n  }),\n);\n\nconst App = () => {\n  const classes = useStyles()\n  const isInitialised = useSelector(appSelector)\n  const dispatch = useDispatch()\n  const isAuth=useSelector(isAuthSelector)\n\n  useEffect(() => {\n    dispatch(initializeApp())\n  }, [])\n\n \n  if (!isInitialised) {\n    return <div>Loaging...</div>\n  }\n \n  return (\n    <Container className={classes.chat_container} maxWidth=\"md\">\n      <Paper elevation={3} className={classes.chat_paper}>\n        <Header />\n        <Route exact path='/' render={() => <Redirect to={'/chat'} />} />\n        <Route path='/chat' render={() => <ChatPage />} />\n        <Route path='/login' render={() => <LoginPage />} />\n      </Paper>\n    </Container>\n  );\n}\n\n\nlet AppC = withRouter(App)\n\nconst AppContainer = () => {\n  return (\n    <AppC />\n  )\n}\n\nlet MainApp: React.FC = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport MainApp from './chat-1-main/m1-ui/App';\n\nReactDOM.render(\n \n    <MainApp/>, document.getElementById('root')\n);\n\n\nreportWebVitals();\n ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_form\":\"LoginPage_login_form__2zX4h\",\"chat_textField\":\"LoginPage_chat_textField__2ZwFc\",\"error\":\"LoginPage_error__3wOuz\",\"buttonLogin\":\"LoginPage_buttonLogin___rInl\",\"buttonLoginPage\":\"LoginPage_buttonLoginPage__3gEiY\",\"loginName\":\"LoginPage_loginName__2jheH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat_paper\":\"Chat_chat_paper__29sB3\",\"chat_userName\":\"Chat_chat_userName__X8cOp\",\"chat_userMessage\":\"Chat_chat_userMessage__2GX1Y\",\"chat_form\":\"Chat_chat_form__33ciF\"};"],"sourceRoot":""}